// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
)

const changePassword = `-- name: ChangePassword :exec
UPDATE users AS u 
SET
    hashed_password = $1,
    password_changed_at = NOW()
WHERE u.username = $2
`

type ChangePasswordParams struct {
	HashedPassword string `db:"hashed_password" json:"hashed_password"`
	Username       string `db:"username" json:"username"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg ChangePasswordParams) error {
	_, err := q.db.ExecContext(ctx, changePassword, arg.HashedPassword, arg.Username)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    hashed_password,
    full_name,
    email
) VALUES (
    $1, $2, $3, $4
)
RETURNING username, hashed_password, full_name, email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `db:"username" json:"username"`
	HashedPassword string `db:"hashed_password" json:"hashed_password"`
	FullName       string `db:"full_name" json:"full_name"`
	Email          string `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, password_changed_at, created_at FROM users u 
WHERE u.username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users AS u
SET 
    full_name = COALESCE($1,u.full_name),
    email = COALESCE($2,u.email)
WHERE u.username = $3
`

type UpdateUserParams struct {
	FullName string `db:"full_name" json:"full_name"`
	Email    string `db:"email" json:"email"`
	Username string `db:"username" json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.FullName, arg.Email, arg.Username)
	return err
}
